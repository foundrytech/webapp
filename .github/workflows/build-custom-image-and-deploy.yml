name: CI/CD workflow

on:
  pull_request:
    types:
      - closed

jobs:
  build-custom-image-and-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      ENV: "github"
      GO_VERSION: "1.21.6"
      PACKER_VERSION: "1.10.1"

    services:
      postgres:
        image: postgres:16

        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres

        ports:
          - 5432:5432

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code into app directory
        uses: actions/checkout@v4

      - name: Set up Go 1.21.6
        uses: actions/setup-go@v5.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: go version

      - name: Get all dependencies based on go.mod
        run: go mod download

      - name: Setup github runner environment variables for integration tests
        run: |
          { 
            echo "DB_HOST=localhost"; 
            echo "DB_PORT=5432"; 
            echo "DB_USER=postgres"; 
            echo "DB_PASSWORD=postgres"; 
            echo "DB_NAME=postgres" 
          } >> $GITHUB_ENV

      - name: Run integration tests
        run: go test -v ./...

      - name: Build the application
        run: |
          go build -ldflags="-linkmode external -extldflags -static" -o webapp
          echo "Application built successfully"

      - name: Authenticate to Google Cloud via service sccount key
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.SERVICE_ACCOUNT_FOR_GITHUB_ACTIONS_CREDENTIALS }}

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v2


        
      # Start update vm instances
      - name: Create new Instance Template version
        id: create-instance-template
        run: |
          LATEST_IMAGE=$(gcloud compute images describe-from-family ${{ secrets.IMAGE_FAMILY }} --project=${{ secrets.PROJECT_ID }} --format="get(name)")
          new_template_name=instance-template-$(date +%Y%m%d%H%M%S)
          echo "NEW_TEMPLATE_NAME=$new_template_name" >> $GITHUB_ENV
          gcloud compute instance-templates create $new_template_name \
            --instance-template-region=${{ secrets.REGION }} \
            --machine-type=${{ secrets.MACHINE_TYPE }} \
            --image=${LATEST_IMAGE} \
            --boot-disk-kms-key=${{ secrets.KMS_KEY_FOR_VM }} \
            --boot-disk-type=${{ secrets.DISK_TYPE }} \
            --boot-disk-size=${{ secrets.DISK_SIZE }} \
            --service-account=${{ secrets.SERVICE_ACCOUNT_FOR_GITHUB_ACTIONS }} \
            --scopes=${{ secrets.SERVICE_ACCOUNT_SCOPES }} \
            --network=${{ secrets.VPC_NETWORK }} \
            --subnet=${{ secrets.SUBNET }} \
            --metadata=startup-script='#!/bin/bash
              set -e
              FLAG="APPENDED"
              ENV_FILE="/opt/myapp/app.properties"
              if ! grep -q "$FLAG" "$ENV_FILE"; then
                {
                  echo "DB_NAME=${{ secrets.DB_NAME }}";
                  echo "DB_USER=${{ secrets.DB_USER }}";
                  echo "DB_PORT=${{ secrets.DB_PORT }}";
                  echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}";
                  echo "DB_HOST=${{ secrets.DB_HOST }}";
                  echo "$FLAG"
                } | sudo tee -a "$ENV_FILE" > /dev/null
              fi'